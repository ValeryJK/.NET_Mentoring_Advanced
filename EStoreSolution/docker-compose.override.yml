services:
  mssqldb:
    container_name: mssql-db
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "Admin!1234"
    ports:
      - "1433:1433"
    volumes:
      - db_mssql_data:/var/opt/mssql
    networks:
      - my_network  
 
  cartdb:
    container_name: cart-db    
    restart: always
    ports:
      - "27018:27017"   
    volumes:
      - mongo_data:/data/db
    networks:
      - my_network

  cart.api:
    container_name: cart.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings__ConnectionString=mongodb://cartdb:27017"
      - "EventBusSettings__HostAddress=amqp://guest:guest@rabbitmq:5672"
    ports:
      - "8000:8080"
      - "8001:8081"
    depends_on:
      - cartdb      
      - rabbitmq
    networks:
      - my_network

  catalog.api:   
    container_name: catalog.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DatabaseSettings__ConnectionString=Server=mssql-db;Database=CatalogDb;User Id=sa;Password=Admin!1234;TrustServerCertificate=True
      - "EventBusSettings__HostAddress=amqp://guest:guest@rabbitmq:5672"
    ports:
      - "8002:8080" 
      - "8003:8081"
    depends_on:
      - mssqldb
      - rabbitmq
    networks:
      - my_network
  
  healthchecks-web:
    container_name: healthchecks-web
    build:
      context: .
      dockerfile: src/WebStatus/HealthCheck.Web/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "8005:8080"
    depends_on:
      - cart.api
      - catalog.api    
    volumes:
      - healthchecks-web-data:/storage 
    networks:
      - my_network
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest 
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - my_network      

  portainer:
    container_name: portainer-app
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - my_network

  prometheus:
    container_name: prometheus-app
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - my_network
      
  grafana:
    container_name: grafana-app
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - my_network

volumes:
  mongo_data:
  db_mssql_data:

networks:
  my_network:
    driver: bridge